{"version":3,"file":"static/js/movies-page.463d2832.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","Views/MoviesPage.jsx","components/MovieCardList/MovieCardList.styled.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/MovieCardList/MovieCardList.jsx","services/apiService.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  // background-color: #faf5f5;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-top: 25px;\n  margin-bottom: 25px;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState, Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { Box } from 'components/Box';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from './SearchBar.styled';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearchQueryChange = e => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchQuery.trim() === '') {\n      toast.error('The search field is empty!');\n      return;\n    }\n\n    onSubmit(searchQuery);\n    resetState();\n  };\n\n  const resetState = () => {\n    setSearchQuery('');\n  };\n\n  return (\n    <>\n    <Box>\n    <SearchForm onSubmit={handleSubmit}>\n      <SearchFormButton type=\"submit\">\n        <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n      </SearchFormButton>\n      <SearchFormInput\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        name=\"searchQuery\"\n        value={searchQuery}\n        onChange={handleSearchQueryChange}\n      />\n    </SearchForm>\n    </Box>\n    <Suspense>\n    <Outlet />\n  </Suspense>\n  </>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from '../services/apiService';\nimport { SearchBar } from '../components/SearchBar/SearchBar';\nimport MovieCardList from '../components/MovieCardList/MovieCardList';\n\nexport default function MoviesPage() {\n  const [searhParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState(null);\n\n  const searchQuery = searhParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    async function getFetchMovies() {\n      try {\n        const data = await fetchSearchMovies(searchQuery);\n        // const { results } = data;\n\n        if (!data.results.length) {\n          throw new Error('No results found');\n        }\n\n        setMovies(data.results);\n      } catch (error) {\n        console.log(error);\n        toast.error('No results found', { duration: 3000 });\n      }\n    }\n    if (searchQuery === '') {\n      return;\n    }\n    getFetchMovies();\n  }, [searchQuery]);\n\n  const handleFormSubmit = newQuery => {\n      setSearchParams({ query: `${newQuery}` });\n  }\n\n  return (\n    <>\n      <SearchBar onSubmit={handleFormSubmit}></SearchBar>\n      {movies && (\n        <>\n          <MovieCardList movies={movies} />\n        </>\n      )}\n    </>\n  );\n      }\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 50px;\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n`;\n\nexport const Card = styled.li`\n  border-radius: 2px;\n  /* display: flex; */\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    /* display: grid;\n    grid-template-columns: minmax(10px, 1fr) 3fr;\n    grid-gap: 25px; */\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1) translateY(-5px);\n    box-shadow: 0px 5px 14px 2px rgba(0, 0, 0, 0.55);\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  object-fit: contain;\n  margin-bottom: 10px;\n\n  &:hover,\n  &:focus {\n    border-radius: 2px;\n  }\n`;\n\nexport const CardTitle = styled.h2`\n  font-style: normal;\n  font-weight: 700;\n  color: #2a363b;\n  font-size: 14px;\n  text-transform: uppercase;\n  text-align: center;\n  margin-bottom: 10px;\n`;\n\nexport const CardInfo = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const MovieCardInfo = styled.p`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 12px;\n  color: #2196f3;\n  margin-bottom: 10px;\n`;\n\nexport const Container = styled.div`\ndisplay: flex;\n/* flex-direction: column; */\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { AiFillStar } from 'react-icons/ai';\nimport {\n  Card,\n  Image,\n  CardTitle,\n  MovieLink,\n  CardInfo,\n  MovieCardInfo,\n  Container,\n} from './MovieCard.styled';\nimport defaultImage from '../Images/defaultMovie.png';\n// import { Box } from 'components/Box';\nfunction MovieCard({ id, poster, title, date, rating, genres }) {\n  const location = useLocation();\n\n  return (\n    <Container >\n    <Card>\n      <MovieLink\n        to={{\n          pathname: `/movies/${id}`,\n          state: { from: location },\n        }}\n      >\n        <Image\n          src={\n            poster\n              ? `https://image.tmdb.org/t/p/original${poster}`\n              : defaultImage\n          }\n          alt={title}\n        />\n      </MovieLink>\n      <CardTitle>{title}</CardTitle>\n      <CardInfo>\n        <MovieCardInfo>{`${genres} | ${date.substring(0, 4)}`}</MovieCardInfo>\n        <MovieCardInfo>\n          <AiFillStar /> {rating}\n        </MovieCardInfo>\n      </CardInfo>\n    </Card>\n    </Container>\n  );\n}\n\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  poster: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  rating: PropTypes.number,\n  genres: PropTypes.array,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchGenresList } from '../../services/apiService';\nimport { List } from './MovieCardList.styled';\nimport MovieCard from '../MovieCard/MovieCard';\n\nfunction MovieCardList({ movies }) {\n  const [genres, setGenres] = useState(null);\n\n  useEffect(() => {\n    async function getFetchGenresList() {\n      try {\n        const genres = await fetchGenresList();\n        setGenres(genres);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getFetchGenresList();\n  }, []);\n\n  return (\n    <List>\n      {genres &&\n        movies.map(\n          ({\n            id,\n            poster_path,\n            title,\n            release_date,\n            vote_average,\n            genre_ids,\n          }) => (\n            <MovieCard\n              key={id}\n              id={id}\n              poster={poster_path}\n              title={title}\n              date={release_date || '(ツ)'}\n              rating={vote_average}\n              genres={genres\n                .filter(genre => genre_ids.includes(genre.id))\n                .slice(0, 3)\n                .map(genre => genre.name)}\n            />\n          ),\n        )}\n    </List>\n  );\n}\n\nMovieCardList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  ),\n};\n\nexport default MovieCardList;\n","import axios from 'axios';\n\nconst API_KEY = 'e46b87edbe0418b9678f5579382a8e13';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function fetchTrandingMovies() {\n  const url = `/trending/movie/day?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchSearchMovies(seacrhQuery) {\n  const url = `/search/movie?api_key=${API_KEY}&query=${seacrhQuery}&language=en-US&include_adult=false`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchMovieInformation(movieId) {\n  const url = `/movie/${movieId}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchCastInformation(movieId) {\n  const url = `/movie/${movieId}/credits?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data.cast;\n}\n\nexport async function fetchReviews(movieId) {\n  const url = `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\n\nexport async function fetchGenresList() {\n  const url = `/genre/movie/list?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n\n  return data.genres;\n}\n"],"names":["SearchForm","styled","SearchFormButton","SearchFormButtonLabel","SearchFormInput","SearchBar","onSubmit","useState","searchQuery","setSearchQuery","resetState","Box","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","name","value","onChange","target","toLowerCase","Suspense","MoviesPage","useSearchParams","searhParams","setSearchParams","movies","setMovies","get","useEffect","fetchSearchMovies","data","results","length","Error","console","log","duration","getFetchMovies","newQuery","query","MovieCardList","List","MovieLink","Link","Card","Image","CardTitle","CardInfo","MovieCardInfo","Container","id","poster","title","date","rating","genres","location","useLocation","to","pathname","state","from","src","defaultImage","alt","substring","setGenres","fetchGenresList","getFetchGenresList","map","poster_path","release_date","vote_average","genre_ids","filter","genre","includes","slice","API_KEY","fetchTrandingMovies","url","axios","seacrhQuery","fetchMovieInformation","movieId","fetchCastInformation","cast","fetchReviews","api_key"],"sourceRoot":""}