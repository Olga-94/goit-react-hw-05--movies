{"version":3,"file":"static/js/cast-view.91f86bf9.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","Views/CastViews.jsx","services/apiService.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 20px;\n  margin-bottom: 50px;\n`;\n\nexport const CastItem = styled.li``;\n\nexport const CastTitle = styled.p`\n  text-align: center;\n  padding: 6px;\n  font-weight: 500;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  object-fit: cover;\n  border-radius: 2px;\n`;\n","import { useEffect, useState, Suspense } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { fetchCastInformation } from '../../services/apiService';\n// import { Container } from '../App.styled';\nimport { CastList, CastItem, CastTitle, Image } from './Cast.styled';\nimport defaultImage from '../Images/default.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { detailsId } = useParams();\n  \n  useEffect(() => {\n  const fetchMoviesCast = async () => {\n    try {\n      const response = await fetchCastInformation(detailsId);\n      setCast(response.data.cast);\n    } catch (error) {\n      setCast([]);\n    }\n  };\n  fetchMoviesCast();\n}, [detailsId]);\n\n  return (\n    <>\n      <CastList>\n        {cast.map(({ id, name, profile_path }) => (\n          <CastItem key={id}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original${profile_path}`\n                  : defaultImage\n              }\n              alt={name}\n            />\n            <CastTitle>{name}</CastTitle>\n          </CastItem>\n        ))}\n      </CastList>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n  \n// Cast.propTypes = {\n//   cast: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.number,\n//       name: PropTypes.string,\n//       profile_path: PropTypes.string,\n//     }),\n//   ),\n// };\n\nexport default Cast;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { fetchCastInformation } from '../services/apiService';\nimport Cast from '../components/Cast/Cast';\n\nconst CastView = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n\n  useEffect(() => {\n    async function getCastInformation() {\n      try {\n        const cast = await fetchCastInformation(movieId);\n\n        if (!cast.length) {\n          throw new Error('Cast not found');\n        }\n\n        setCredits(cast);\n      } catch (error) {\n        console.log(error);\n        toast.error('Cast not found');\n      }\n      const cast = await fetchCastInformation(movieId);\n\n      setCredits(cast);\n      window.scrollTo({ top: 650, behavior: 'smooth' });\n    }\n    getCastInformation();\n  }, [movieId]);\n  // useEffect(() => {\n  //   async function getCastInformation() {\n      \n  //     try {\n  //       const cast = await fetchCastInformation(movieId);\n\n  //       if (!cast.length) {\n  //         throw new Error('Cast not found');\n  //       }\n\n  //       setCredits(cast);\n  //     } catch (error) {\n  //       console.log(error);\n  //       toast.error('Cast not found');\n  //     }\n  //     const cast = await fetchCastInformation(movieId);\n\n  //     setCredits(cast);\n  //     window.scrollTo({ top: 650, behavior: 'smooth' });\n  //   }\n  //   getCastInformation();\n  // }, [movieId]);\n\n  return <>{credits && <Cast credits={credits} />}</>;\n}\n\n\nexport default CastView;","import axios from 'axios';\n\nconst API_KEY = 'e46b87edbe0418b9678f5579382a8e13';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: API_KEY };\n\nexport async function fetchTrandingMovies() {\n  const url = `/trending/movie/day?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchSearchMovies(seacrhQuery) {\n  const url = `/search/movie?api_key=${API_KEY}&query=${seacrhQuery}&language=en-US&include_adult=false`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchMovieInformation(movieId) {\n  const url = `/movie/${movieId}?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data;\n}\n\nexport async function fetchCastInformation(movieId) {\n  const url = `/movie/${movieId}/credits?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n  return data.cast;\n}\n\nexport async function fetchReviews(movieId) {\n  const url = `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(url);\n  return data.results;\n}\n\nexport async function fetchGenresList() {\n  const url = `/genre/movie/list?api_key=${API_KEY}`;\n  const { data } = await axios.get(url);\n\n  return data.genres;\n}\n"],"names":["CastList","styled","CastItem","CastTitle","Image","useState","cast","setCast","detailsId","useParams","useEffect","fetchMoviesCast","fetchCastInformation","response","data","map","id","name","profile_path","src","defaultImage","alt","Suspense","movieId","credits","setCredits","length","Error","console","log","toast","window","scrollTo","top","behavior","getCastInformation","API_KEY","fetchTrandingMovies","url","axios","fetchSearchMovies","seacrhQuery","fetchMovieInformation","fetchReviews","results","fetchGenresList","genres","api_key"],"sourceRoot":""}