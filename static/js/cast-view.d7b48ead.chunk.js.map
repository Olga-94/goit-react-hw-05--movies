{"version":3,"file":"static/js/cast-view.d7b48ead.chunk.js","mappings":"0SAEaA,EAAWC,EAAAA,GAAAA,GAAH,iJAORC,EAAWD,EAAAA,GAAAA,GAAH,sBAERE,EAAYF,EAAAA,GAAAA,EAAH,qFAMTG,EAAQH,EAAAA,GAAAA,IAAH,6H,mBCwClB,EAjDa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAcC,EAAAA,EAAAA,MAAdD,UAaR,OAZAE,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAAe,mCAAG,8GAEGC,EAAAA,EAAAA,IAAqBJ,GAFxB,OAEdK,EAFc,OAGpBN,EAAQM,EAASC,KAAKR,MAHF,gDAKpBC,EAAQ,IALY,yDAAH,qDAQrBI,MACC,CAACH,KAGA,UAAC,IAAD,YACE,SAACR,EAAD,UACGM,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACR,UAAChB,EAAD,YACE,SAACE,EAAD,CACEe,IACED,EAAY,6CAC8BA,GACtCE,EAENC,IAAKJ,KAEP,SAACd,EAAD,UAAYc,MATCD,SAanB,SAAC,EAAAM,SAAD,WACE,SAAC,KAAD,UCLR,EA9BiB,WACf,IAAQC,GAAYd,EAAAA,EAAAA,MAAZc,QACR,GAA8BlB,EAAAA,EAAAA,UAAS,MAAvC,eAAOmB,EAAP,KAAgBC,EAAhB,KAwBA,OAtBAf,EAAAA,EAAAA,YAAU,WACR,IAAMgB,EAAkB,mCAAG,WAAMH,GAAN,mGAEJX,EAAAA,EAAAA,IAAqBW,GAFjB,WAEjBjB,EAFiB,QAIbqB,OAJa,sBAKf,IAAIC,MAAM,kBALK,OAQvBH,EAAWnB,GARY,gDAUvBuB,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAY,kBAXW,0BAaNnB,EAAAA,EAAAA,IAAqBW,GAbf,QAanBjB,EAbmB,OAezBmB,EAAWnB,GACX0B,OAAOC,SAAS,CAAEC,IAAK,IAAKC,SAAU,WAhBb,yDAAH,sDAkBxBT,MACC,CAACH,KAEG,8BAAGC,IAAW,SAAC,EAAD,CAAMA,QAASA,Q","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","Views/CastViews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 20px;\n  margin-bottom: 50px;\n`;\n\nexport const CastItem = styled.li``;\n\nexport const CastTitle = styled.p`\n  text-align: center;\n  padding: 6px;\n  font-weight: 500;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  object-fit: cover;\n  border-radius: 2px;\n`;\n","import { useEffect, useState, Suspense } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { fetchCastInformation } from '../../services/apiService';\nimport { Container } from '../App.styled';\nimport { CastList, CastItem, CastTitle, Image } from './Cast.styled';\nimport defaultImage from '../Images/default.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { detailsId } = useParams();\n  useEffect(() => {\n  const fetchMoviesCast = async () => {\n    try {\n      const response = await fetchCastInformation(detailsId);\n      setCast(response.data.cast);\n    } catch (error) {\n      setCast([]);\n    }\n  };\n  fetchMoviesCast();\n}, [detailsId]);\n\n  return (\n    <Container>\n      <CastList>\n        {cast.map(({ id, name, profile_path }) => (\n          <CastItem key={id}>\n            <Image\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original${profile_path}`\n                  : defaultImage\n              }\n              alt={name}\n            />\n            <CastTitle>{name}</CastTitle>\n          </CastItem>\n        ))}\n      </CastList>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n};\n  \n// Cast.propTypes = {\n//   cast: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.number,\n//       name: PropTypes.string,\n//       profile_path: PropTypes.string,\n//     }),\n//   ),\n// };\n\nexport default Cast;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { fetchCastInformation } from '../services/apiService';\nimport Cast from '../components/Cast/Cast';\n\nconst CastView = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n\n  useEffect(() => {\n    const getCastInformation = async movieId => {\n      try {\n        const cast = await fetchCastInformation(movieId);\n\n        if (!cast.length) {\n          throw new Error('Cast not found');\n        }\n\n        setCredits(cast);\n      } catch (error) {\n        console.log(error);\n        toast.error('Cast not found');\n      }\n      const cast = await fetchCastInformation(movieId);\n\n      setCredits(cast);\n      window.scrollTo({ top: 650, behavior: 'smooth' });\n    }\n    getCastInformation();\n  }, [movieId]);\n\n  return <>{credits && <Cast credits={credits} />}</>;\n}\n\n\nexport default CastView;"],"names":["CastList","styled","CastItem","CastTitle","Image","useState","cast","setCast","detailsId","useParams","useEffect","fetchMoviesCast","fetchCastInformation","response","data","map","id","name","profile_path","src","defaultImage","alt","Suspense","movieId","credits","setCredits","getCastInformation","length","Error","console","log","toast","window","scrollTo","top","behavior"],"sourceRoot":""}